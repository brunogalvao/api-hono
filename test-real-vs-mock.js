import dotenv from "dotenv";

// Carregar vari√°veis de ambiente
dotenv.config({ path: ".env.local" });
dotenv.config();

console.log("üîç Teste: Dados Reais vs Mockados\n");
console.log("=" * 60);

const BASE_URL = "http://localhost:3000";

// Fun√ß√£o para testar endpoint com dados mockados (removidos)
async function testarDadosMockados() {
    console.log("\nüé≠ TESTE 1: Endpoints com Dados Mockados (REMOVIDOS)");
    console.log("-" * 50);

    try {
        // Teste do endpoint antigo com dados mockados
        const response = await fetch(`${BASE_URL}/api/ia`, {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            },
            body: JSON.stringify({}),
        });

        const data = await response.json();

        if (response.ok) {
            console.log("üìä Resposta do endpoint antigo:");
            console.log(JSON.stringify(data, null, 2));
        } else {
            console.log("‚ùå Endpoint antigo falhou como esperado:");
            console.log(data.message || data.error);
        }

        // Teste do endpoint de incomes mockado
        const incomesResponse = await fetch(`${BASE_URL}/api/incomes`);
        const incomesData = await incomesResponse.json();

        console.log("\nüìã Status do endpoint /api/incomes:");
        if (incomesData.message && incomesData.message.includes("real")) {
            console.log("‚úÖ Redirecionado para endpoint real:");
            console.log(`- ${incomesData.message}`);
            console.log("- Endpoints dispon√≠veis:", incomesData.endpoints);
        } else {
            console.log("‚ùå Ainda usando dados mockados:");
            console.log(incomesData);
        }

    } catch (error) {
        console.error("‚ùå Erro ao testar endpoints mockados:", error.message);
    }
}

// Fun√ß√£o para testar an√°lise com dados do frontend
async function testarAnaliseComDadosFrontend() {
    console.log("\nüíª TESTE 2: An√°lise com Dados do Frontend");
    console.log("-" * 50);

    const dadosSimulados = {
        rendimentoMes: 5000,
        tarefasPagas: 2000,
        tarefasPendentes: 1500,
        cotacaoDolar: 5.50
    };

    console.log("üìä Dados simulados enviados:");
    console.log(JSON.stringify(dadosSimulados, null, 2));

    try {
        const response = await fetch(`${BASE_URL}/api/ia/analise-frontend`, {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            },
            body: JSON.stringify(dadosSimulados),
        });

        if (response.ok) {
            const data = await response.json();
            console.log("\n‚úÖ An√°lise com dados do frontend:");
            console.log(`- IA utilizada: ${data.data.metadata.ia}`);
            console.log(`- Fonte: ${data.data.metadata.fonte}`);
            console.log(`- Renda dispon√≠vel: ${data.data.dashboard.rendimentoDisponivelBRL}`);
            console.log(`- Status economia: ${data.data.analise.statusEconomia}`);
            console.log(`- Resumo: ${data.data.analise.resumo.substring(0, 100)}...`);
        } else {
            const errorData = await response.json();
            console.log("‚ùå Erro na an√°lise frontend:");
            console.log(errorData);
        }

    } catch (error) {
        console.error("‚ùå Erro ao testar an√°lise frontend:", error.message);
    }
}

// Fun√ß√£o para testar an√°lise com dados reais (sem autentica√ß√£o)
async function testarAnaliseComDadosReais() {
    console.log("\nüóÑÔ∏è TESTE 3: An√°lise com Dados Reais do Supabase");
    console.log("-" * 50);

    try {
        // Este endpoint requer autentica√ß√£o, ent√£o esperamos erro 401
        const response = await fetch(`${BASE_URL}/api/ia/analise-investimento`, {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            },
            body: JSON.stringify({
                mes: 1,
                ano: 2025,
                cotacaoDolar: 5.50
            }),
        });

        const data = await response.json();

        if (response.status === 401) {
            console.log("‚úÖ Endpoint com dados reais funciona (requer autentica√ß√£o):");
            console.log(`- Status: ${response.status}`);
            console.log(`- Mensagem: ${data.error}`);
            console.log("- Este comportamento √© esperado - endpoint protegido");
        } else if (response.ok) {
            console.log("üéâ An√°lise com dados reais (usu√°rio autenticado):");
            console.log(`- IA utilizada: ${data.data.metadata.ia}`);
            console.log(`- Fonte: ${data.data.metadata.fonte}`);
            console.log(`- Total rendimentos: ${data.data.metadata.dadosReais.totalRendimentos}`);
            console.log(`- Total tarefas: ${data.data.metadata.dadosReais.totalTarefas}`);
        } else {
            console.log("‚ùå Erro inesperado:");
            console.log(data);
        }

    } catch (error) {
        console.error("‚ùå Erro ao testar an√°lise com dados reais:", error.message);
    }
}

// Fun√ß√£o para testar sistema de diagn√≥stico
async function testarSistemaDiagnostico() {
    console.log("\nüîß TESTE 4: Sistema de Diagn√≥stico");
    console.log("-" * 50);

    try {
        // Teste r√°pido de status
        const statusResponse = await fetch(`${BASE_URL}/api/ia/status`);

        if (statusResponse.ok) {
            const statusData = await statusResponse.json();
            console.log("üìä Status das APIs:");
            console.log(`- Gemini: ${statusData.apis.gemini}`);
            console.log(`- OpenAI: ${statusData.apis.openai}`);
            console.log(`- Supabase: ${statusData.apis.supabase}`);
            console.log(`- Local: ${statusData.apis.local}`);
            console.log(`- Total configurado: ${statusData.totalConfigured}/3`);

            if (statusData.recommendations.critical) {
                console.log(`‚ö†Ô∏è Cr√≠tico: ${statusData.recommendations.critical}`);
            }
            if (statusData.recommendations.warning) {
                console.log(`‚ö†Ô∏è Aviso: ${statusData.recommendations.warning}`);
            }
            if (statusData.recommendations.info) {
                console.log(`‚ÑπÔ∏è Info: ${statusData.recommendations.info}`);
            }
        }

        // Teste completo de diagn√≥stico (mais demorado)
        console.log("\nüîç Executando diagn√≥stico completo...");
        const diagnosticResponse = await fetch(`${BASE_URL}/api/ia/teste-conexao`);

        if (diagnosticResponse.ok) {
            const diagnosticData = await diagnosticResponse.json();
            console.log(`‚úÖ Diagn√≥stico completo executado em ${diagnosticData.tempoTotal}`);
            console.log(`- Status geral: ${diagnosticData.statusGeral}`);
            console.log(`- IA recomendada: ${diagnosticData.iaRecomendada}`);
            console.log(`- Sistemas funcionando: ${diagnosticData.funcionando}`);

            // Status individual das IAs
            console.log("\nü§ñ Status das IAs:");
            console.log(`- Gemini: ${diagnosticData.resultados.gemini.status}`);
            console.log(`- OpenAI: ${diagnosticData.resultados.openai.status}`);
            console.log(`- Local: ${diagnosticData.resultados.local.status}`);
        }

    } catch (error) {
        console.error("‚ùå Erro ao testar sistema de diagn√≥stico:", error.message);
    }
}

// Fun√ß√£o principal
async function executarTodosTestes() {
    console.log("üß™ Iniciando compara√ß√£o entre dados mockados e reais...\n");

    await testarDadosMockados();
    await testarAnaliseComDadosFrontend();
    await testarAnaliseComDadosReais();
    await testarSistemaDiagnostico();

    console.log("\n" + "=" * 60);
    console.log("üìä RESUMO DAS MUDAN√áAS");
    console.log("=" * 60);

    console.log("\n‚úÖ REMOVIDO (Dados Mockados):");
    console.log("- POST /api/ia - an√°lise com dados fixos");
    console.log("- GET /api/incomes - lista mockada de rendimentos");
    console.log("- GET /api/incomes/total-por-mes - totais mockados");
    console.log("- Dados simulados hardcoded no c√≥digo");

    console.log("\nüÜï ADICIONADO (Dados Reais):");
    console.log("- POST /api/ia/analise-investimento - usa dados reais do Supabase");
    console.log("- POST /api/ia/analise-frontend - aceita dados do frontend");
    console.log("- GET /api/ia/status - status r√°pido das APIs");
    console.log("- GET /api/ia/teste-conexao - diagn√≥stico completo");
    console.log("- Integra√ß√£o completa com Supabase");
    console.log("- Autentica√ß√£o JWT obrigat√≥ria");

    console.log("\nüîÑ MIGRA√á√ÉO:");
    console.log("1. Dados mockados ‚Üí Dados reais do Supabase");
    console.log("2. Sem autentica√ß√£o ‚Üí Autentica√ß√£o obrigat√≥ria");
    console.log("3. Dados fixos ‚Üí Dados din√¢micos por usu√°rio");
    console.log("4. Sem fallback ‚Üí Sistema robusto com 3 n√≠veis de fallback");

    console.log("\nüí° RECOMENDA√á√ïES:");
    console.log("- Use POST /api/ia/analise-investimento para produ√ß√£o");
    console.log("- Use POST /api/ia/analise-frontend para testes");
    console.log("- Configure GEMINI_API_KEY para melhor performance");
    console.log("- Configure autentica√ß√£o para acessar dados reais");

    console.log("\n‚úÖ Testes conclu√≠dos!");
}

// Executar testes
executarTodosTestes().catch(console.error);
