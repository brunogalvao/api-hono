import { Hono } from "hono";
import { handleOptions } from "../config/apiHeader";
import { getSupabaseClient } from "../config/supabaseClient";
import { formatToBRL, formatToUSD, convertBRLtoUSD } from "../utils/format";
import { GoogleGenerativeAI } from "@google/generative-ai";

export const config = { runtime: "edge" };

const app = new Hono();

// Inicializar Gemini
const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY || "");

app.options("/api/ia/analise-investimento", () => handleOptions());

app.post("/api/ia/analise-investimento", async (c) => {
  try {
    // Receber dados do dashboard do frontend
    const dashboardData = await c.req.json();
    
    // Validar dados obrigat√≥rios
    if (!dashboardData.rendimentoMes || !dashboardData.totalTarefas) {
      return c.json({ 
        error: "Dados obrigat√≥rios ausentes", 
        required: ["rendimentoMes", "totalTarefas"],
        received: Object.keys(dashboardData)
      }, 400);
    }

    // Dados do dashboard (agora vindos do frontend)
    const {
      rendimentoMes = 0,
      tarefasPagas = 0,
      tarefasPendentes = 0,
      totalTarefas = 0,
      cotacaoDolar = 5.57
    } = dashboardData;

    // Calcular dados financeiros
    const rendimentoDisponivel = rendimentoMes - totalTarefas;
    const percentualGasto = rendimentoMes > 0 ? (totalTarefas / rendimentoMes) * 100 : 0;
    const percentualDisponivel = 100 - percentualGasto;

    // Obter cota√ß√£o real do d√≥lar
    const dolarResponse = await fetch("https://economia.awesomeapi.com.br/last/USD-BRL");
    const dolarData = await dolarResponse.json();
    const cotacaoDolarReal = parseFloat(dolarData.USDBRL.bid);

    // Calcular investimento recomendado (30% do sal√°rio)
    const investimentoRecomendado = rendimentoMes * 0.30;
    const investimentoDisponivel = Math.max(0, rendimentoDisponivel * 0.30);

    // Convers√µes para d√≥lar
    const investimentoUSD = convertBRLtoUSD(investimentoRecomendado, cotacaoDolarReal);
    const investimentoDisponivelUSD = convertBRLtoUSD(investimentoDisponivel, cotacaoDolarReal);

    // An√°lise de economia - situa√ß√£o cr√≠tica se gastos > 100%
    const precisaEconomizar = percentualGasto > 100;
    const economiaRecomendada = percentualGasto > 100 ? (totalTarefas - rendimentoMes) : 0;

    // Construir prompt para Gemini com dados din√¢micos
    const prompt = `
AN√ÅLISE FINANCEIRA DIN√ÇMICA:

RENDIMENTOS:
- Sal√°rio mensal: ${formatToBRL(rendimentoMes)}
- Rendimento dispon√≠vel: ${formatToBRL(rendimentoDisponivel)} ${rendimentoDisponivel < 0 ? '(NEGATIVO!)' : ''}
- Percentual gasto: ${percentualGasto.toFixed(1)}% ${percentualGasto > 100 ? '(CR√çTICO!)' : ''}
- Percentual dispon√≠vel: ${percentualDisponivel.toFixed(1)}% ${percentualDisponivel < 0 ? '(NEGATIVO!)' : ''}

DESPESAS:
- Tarefas pagas: ${formatToBRL(tarefasPagas)}
- Tarefas pendentes: ${formatToBRL(tarefasPendentes)}
- Total de despesas: ${formatToBRL(totalTarefas)}

SITUA√á√ÉO:
- D√©ficit mensal: ${formatToBRL(Math.abs(rendimentoDisponivel))}
- Despesas s√£o ${percentualGasto.toFixed(1)}% do rendimento
- Necess√°rio economizar: ${formatToBRL(economiaRecomendada)}

INVESTIMENTO:
- Valor recomendado: ${formatToBRL(investimentoRecomendado)} (${investimentoUSD.usd})
- Valor dispon√≠vel para investir: ${formatToBRL(investimentoDisponivel)} (${investimentoDisponivelUSD.usd})
- Cota√ß√£o do d√≥lar: ${formatToBRL(cotacaoDolarReal)}

AN√ÅLISE NECESS√ÅRIA:
1. Precisa economizar? ${precisaEconomizar ? 'SIM' : 'N√ÉO'} ${percentualGasto > 100 ? '(CR√çTICO)' : ''}
2. Economia recomendada: ${formatToBRL(economiaRecomendada)}
3. Estrat√©gia baseada na situa√ß√£o atual
4. Dicas de economia apropriadas
5. Prioriza√ß√£o de pagamentos
6. Redu√ß√£o de despesas se necess√°rio

Forne√ßa uma an√°lise personalizada em JSON com:
- statusEconomia (bom/regular/critico)
- precisaEconomizar (boolean)
- economiaRecomendada (number)
- estrategiaInvestimento (object)
- dicasEconomia (array)
- distribuicaoInvestimento (object)
- resumo (string)

Responda APENAS com o JSON v√°lido, sem texto adicional.
`;

    // Chamar Gemini
    const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash" });
    const result = await model.generateContent(prompt);
    const response = await result.response;
    const aiResponse = response.text();

    let analysisResult;
    
    try {
      // Tentar extrair JSON da resposta
      const jsonMatch = aiResponse.match(/\{[\s\S]*\}/);
      if (jsonMatch) {
        analysisResult = JSON.parse(jsonMatch[0]);
      } else {
        throw new Error("JSON n√£o encontrado na resposta");
      }
    } catch (error) {
      // Fallback se a IA n√£o retornar JSON v√°lido - AN√ÅLISE DIN√ÇMICA
      const statusEconomia = percentualGasto > 100 ? "critico" : percentualGasto > 70 ? "regular" : "bom";
      
      analysisResult = {
        statusEconomia,
        precisaEconomizar: percentualGasto > 70,
        economiaRecomendada,
        estrategiaInvestimento: {
          curtoPrazo: percentualGasto > 100 
            ? "üö® EMERG√äNCIA: Reduzir despesas imediatamente"
            : percentualGasto > 70
            ? "‚ö†Ô∏è ATEN√á√ÉO: Reduzir despesas urgentemente"
            : "‚úÖ Manter reserva de emerg√™ncia de 6 meses",
          medioPrazo: percentualGasto > 70
            ? "üìä Reestruturar or√ßamento completamente"
            : "üí∞ Diversificar em CDB e fundos conservadores",
          longoPrazo: percentualGasto > 70
            ? "üí∞ Focar em aumentar renda e reduzir d√≠vidas"
            : "üöÄ Investir em d√≥lar para prote√ß√£o cambial"
        },
        dicasEconomia: percentualGasto > 100 ? [
          "üö® URGENTE: Reduzir despesas em pelo menos 80%",
          "üìã Priorizar pagamento das d√≠vidas mais caras",
          "üí∞ Negociar parcelamento das despesas pendentes",
          "üìä Revisar TODAS as despesas mensais",
          "üéØ Estabelecer metas de economia de 90%",
          "‚ö†Ô∏è N√£o fazer novos gastos at√© equilibrar"
        ] : percentualGasto > 70 ? [
          "‚ö†Ô∏è Reduzir despesas urgentemente",
          "üìä Revisar todas as despesas mensais",
          "üéØ Estabelecer metas de economia de 20%",
          "üí∞ Identificar despesas desnecess√°rias"
        ] : [
          "‚úÖ Excelente controle financeiro!",
          "üí° Continue mantendo as despesas baixas",
          "üöÄ Aproveite para aumentar os investimentos",
          "üìà Considere diversificar mais os investimentos"
        ],
        distribuicaoInvestimento: percentualGasto > 100 ? {
          poupanca: 0, // Foco em reserva de emerg√™ncia
          dolar: 0,    // N√£o investir at√© equilibrar
          outros: 0    // Foco total em economia
        } : percentualGasto > 70 ? {
          poupanca: 60, // Foco em seguran√ßa
          dolar: 20,    // Prote√ß√£o cambial
          outros: 20    // Diversifica√ß√£o
        } : {
          poupanca: 30, // Reserva de emerg√™ncia
          dolar: 35,    // Prote√ß√£o cambial
          outros: 35    // Diversifica√ß√£o
        },
        resumo: percentualGasto > 100 
          ? `üö® SITUA√á√ÉO CR√çTICA: Voc√™ est√° gastando ${percentualGasto.toFixed(1)}% da renda (d√©ficit de ${formatToBRL(Math.abs(rendimentoDisponivel))}). A√ß√£o imediata necess√°ria.`
          : percentualGasto > 70
          ? `‚ö†Ô∏è SITUA√á√ÉO REGULAR: Voc√™ est√° gastando ${percentualGasto.toFixed(1)}% da renda. Foque em reduzir despesas.`
          : `‚úÖ EXCELENTE CONTROLE: Voc√™ est√° gastando apenas ${percentualGasto.toFixed(1)}% da renda. Pode investir ${formatToBRL(investimentoRecomendado)}.`
      };
    }

    return c.json({
      success: true,
      data: {
        dashboard: {
          rendimentoMes: rendimentoMes,
          rendimentoMesBRL: formatToBRL(rendimentoMes),
          rendimentoDisponivel: rendimentoDisponivel,
          rendimentoDisponivelBRL: formatToBRL(rendimentoDisponivel),
          percentualGasto: percentualGasto,
          percentualDisponivel: percentualDisponivel,
          tarefasPagas: tarefasPagas,
          tarefasPagasBRL: formatToBRL(tarefasPagas),
          tarefasPendentes: tarefasPendentes,
          tarefasPendentesBRL: formatToBRL(tarefasPendentes),
          totalTarefas: totalTarefas,
          totalTarefasBRL: formatToBRL(totalTarefas)
        },
        investimento: {
          recomendado: investimentoRecomendado,
          recomendadoBRL: formatToBRL(investimentoRecomendado),
          recomendadoUSD: investimentoUSD,
          disponivel: investimentoDisponivel,
          disponivelBRL: formatToBRL(investimentoDisponivel),
          disponivelUSD: investimentoDisponivelUSD,
          percentualSalario: 30
        },
        cotacaoDolar: {
          valor: cotacaoDolarReal,
          valorBRL: formatToBRL(cotacaoDolarReal),
          timestamp: dolarData.USDBRL.create_date
        },
        analise: analysisResult,
        metadata: {
          timestamp: new Date().toISOString(),
          fonte: "Dashboard Financeiro",
          versao: "4.0",
          ia: "Google Gemini",
          respostaIA: aiResponse.substring(0, 200) + "..." // Primeiros 200 chars da resposta
        }
      }
    });

  } catch (error: any) {
    return c.json({
      error: "Erro na an√°lise de investimento",
      details: error.message
    }, 500);
  }
});

export const POST = app.fetch;
export const OPTIONS = app.fetch;
export default app.fetch; 