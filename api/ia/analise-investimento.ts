import { Hono } from "hono";
import { GoogleGenerativeAI } from "@google/generative-ai";
import OpenAI from "openai";
import { getSupabaseClient } from "../config/supabaseClient";

export const config = { runtime: "edge" };

const app = new Hono();

// Fun√ß√£o para formatar valores em BRL
const formatToBRL = (value: number | string) => {
    const number = typeof value === "string" ? Number(value) : value;
    if (isNaN(number)) return "Valor inv√°lido";
    return new Intl.NumberFormat("pt-BR", {
        style: "currency",
        currency: "BRL",
    }).format(number);
};

// Fun√ß√£o para converter BRL para USD
const convertBRLtoUSD = (brlValue: number, dolarRate: number) => {
    const usdValue = brlValue / dolarRate;
    return {
        brl: formatToBRL(brlValue),
        usd: new Intl.NumberFormat("en-US", {
            style: "currency",
            currency: "USD",
        }).format(usdValue),
    };
};

// Fun√ß√£o para an√°lise local inteligente (sem IA externa)
const analiseLocalInteligente = (
    rendimentoMes: number,
    tarefasPagas: number,
    tarefasPendentes: number,
    totalTarefas: number,
    rendimentoDisponivel: number,
    percentualGasto: number,
    economiaRecomendada: number,
) => {
    // üéØ AN√ÅLISE REFINADA POR CEN√ÅRIOS

    // CEN√ÅRIO 1: D√âFICIT (Gastos > Rendimento)
    if (rendimentoDisponivel < 0) {
        const deficitMensal = Math.abs(rendimentoDisponivel);
        const fatorRisco = percentualGasto / 100; // Quantas vezes gasta mais que ganha

        return {
            cenario: "D√âFICIT_CR√çTICO",
            statusEconomia: "CR√çTICO",
            precisaEconomizar: true,
            economiaRecomendada: deficitMensal,
            investimentoRecomendado: 0,
            rendimentoDisponivel: 0,

            analiseDetalhada: {
                rendimentoMensal: `${formatToBRL(rendimentoMes)} - Baixo para as despesas atuais`,
                gastoMensal: `${formatToBRL(totalTarefas)} - ${fatorRisco.toFixed(1)}x maior que a renda`,
                situacaoFinanceira: `D√âFICIT de ${formatToBRL(deficitMensal)} por m√™s`,
                nivelRisco:
                    fatorRisco > 3
                        ? "EXTREMO"
                        : fatorRisco > 2
                          ? "ALTO"
                          : "M√âDIO",
            },

            estrategiaRecuperacao: {
                prioridade1:
                    "üö® EMERG√äNCIA: Cortar gastos em 80% imediatamente",
                prioridade2: `üí∞ URGENTE: Aumentar renda em pelo menos ${formatToBRL(deficitMensal)}`,
                prioridade3:
                    "üìä CR√çTICO: Renegociar todas as d√≠vidas pendentes",
                metaMensal: `Reduzir d√©ficit de ${formatToBRL(deficitMensal)} para zero`,
            },

            acoesPraticas: [
                `Cortar ${formatToBRL(deficitMensal)} em gastos mensais`,
                "Buscar renda extra: freelances, vendas, trabalho extra",
                "Renegociar prazos e valores das d√≠vidas",
                "Cancelar assinaturas e servi√ßos n√£o essenciais",
                "Priorizar apenas gastos b√°sicos (alimenta√ß√£o, moradia)",
                "Estabelecer plano de 90 dias para equilibrar contas",
            ],

            melhoriaEconomica: {
                aumentoRendaMinimo: formatToBRL(deficitMensal),
                reducaoGastosMinima: formatToBRL(deficitMensal * 0.7),
                tempoEstimadoRecuperacao: "3-6 meses com disciplina total",
            },

            resumo: `üö® SITUA√á√ÉO CR√çTICA: D√©ficit mensal de ${formatToBRL(deficitMensal)}. ZERO investimentos. Foque em equilibrar receitas e despesas URGENTEMENTE.`,
        };
    }

    // CEN√ÅRIO 2: EQUIL√çBRIO (Gastos ‚âà Rendimento)
    if (
        rendimentoDisponivel >= 0 &&
        rendimentoDisponivel <= rendimentoMes * 0.1
    ) {
        const margemSeguranca = rendimentoDisponivel;

        return {
            cenario: "EQUIL√çBRIO_FR√ÅGIL",
            statusEconomia: "REGULAR",
            precisaEconomizar: false,
            economiaRecomendada: 0,
            investimentoRecomendado: 0,
            rendimentoDisponivel: margemSeguranca,

            analiseDetalhada: {
                rendimentoMensal: `${formatToBRL(rendimentoMes)} - Adequado para gastos atuais`,
                gastoMensal: `${formatToBRL(totalTarefas)} - ${percentualGasto.toFixed(1)}% da renda`,
                situacaoFinanceira: `Margem pequena de ${formatToBRL(margemSeguranca)}`,
                nivelRisco: "M√âDIO - Sem margem para emerg√™ncias",
            },

            estrategiaOtimizacao: {
                foco1: "üí∞ Criar reserva de emerg√™ncia de 6 meses",
                foco2: "üìà Aumentar renda em 20-30% para investimentos",
                foco3: "üìä Otimizar gastos para liberar 15% da renda",
                metaMensal: `Criar sobra de ${formatToBRL(rendimentoMes * 0.2)} para investir`,
            },

            acoesPraticas: [
                "Criar reserva de emerg√™ncia antes de investir",
                `Buscar renda adicional de ${formatToBRL(rendimentoMes * 0.3)}`,
                "Otimizar gastos sem comprometer qualidade de vida",
                "Revisar contratos e negociar melhores pre√ßos",
                "Desenvolver habilidades para aumentar renda",
                "Estabelecer metas de economia de 15-20% da renda",
            ],

            melhoriaEconomica: {
                aumentoRendaRecomendado: formatToBRL(rendimentoMes * 0.3),
                reducaoGastosOtima: formatToBRL(totalTarefas * 0.15),
                potencialInvestimento: formatToBRL(rendimentoMes * 0.2),
                tempoParaInvestir: "6-12 meses construindo reserva",
            },

            resumo: `‚öñÔ∏è EQUIL√çBRIO FR√ÅGIL: Sobra apenas ${formatToBRL(margemSeguranca)}. Foque em aumentar renda e criar reserva antes de investir.`,
        };
    }

    // CEN√ÅRIO 3: SUPER√ÅVIT (Rendimento > Gastos)
    if (rendimentoDisponivel > rendimentoMes * 0.1) {
        const percentualDisponivel =
            (rendimentoDisponivel / rendimentoMes) * 100;
        const investimentoSeguro = rendimentoDisponivel * 0.7; // 70% do dispon√≠vel
        const reservaEmergencia = rendimentoDisponivel * 0.3; // 30% para reserva

        return {
            cenario: "SUPER√ÅVIT_SAUD√ÅVEL",
            statusEconomia: percentualDisponivel > 30 ? "EXCELENTE" : "BOM",
            precisaEconomizar: false,
            economiaRecomendada: 0,
            investimentoRecomendado: investimentoSeguro,
            rendimentoDisponivel: rendimentoDisponivel,

            analiseDetalhada: {
                rendimentoMensal: `${formatToBRL(rendimentoMes)} - Boa capacidade financeira`,
                gastoMensal: `${formatToBRL(totalTarefas)} - ${percentualGasto.toFixed(1)}% da renda (controle excelente)`,
                situacaoFinanceira: `Sobra de ${formatToBRL(rendimentoDisponivel)} (${percentualDisponivel.toFixed(1)}% da renda)`,
                nivelRisco: "BAIXO - Situa√ß√£o financeira saud√°vel",
            },

            estrategiaInvestimento: {
                valorSeguroInvestir: formatToBRL(investimentoSeguro),
                valorReservaEmergencia: formatToBRL(reservaEmergencia),
                distribuicaoSugerida: {
                    emergencia: `${formatToBRL(reservaEmergencia)} (30% do dispon√≠vel)`,
                    investimentoConservador: `${formatToBRL(investimentoSeguro * 0.4)} (28% do dispon√≠vel - Poupan√ßa/CDB)`,
                    investimentoModerado: `${formatToBRL(investimentoSeguro * 0.4)} (28% do dispon√≠vel - Fundos/D√≥lar)`,
                    investimentoArrojado: `${formatToBRL(investimentoSeguro * 0.2)} (14% do dispon√≠vel - A√ß√µes/Cripto)`,
                },
            },

            acoesPraticas: [
                `Investir at√© ${formatToBRL(investimentoSeguro)} com seguran√ßa`,
                "Manter reserva de emerg√™ncia sempre atualizada",
                "Diversificar investimentos por n√≠veis de risco",
                "Considerar aumentar percentual investido gradualmente",
                "Estudar op√ß√µes de investimento de longo prazo",
                "Reavaliar estrat√©gia a cada 3-6 meses",
            ],

            melhoriaEconomica: {
                potencialMaximoInvestimento: formatToBRL(
                    rendimentoDisponivel * 0.8,
                ),
                metaRendimentoAnual: `${(investimentoSeguro * 12 * 0.12).toFixed(0)}% ao ano (estimativa conservadora)`,
                crescimentoPatrimonial: `${formatToBRL(investimentoSeguro * 12)} por ano em investimentos`,
                proximoNivel:
                    percentualDisponivel < 30
                        ? "Aumentar renda para investir mais"
                        : "Otimizar carteira de investimentos",
            },

            resumo: `‚úÖ SITUA√á√ÉO EXCELENTE: Sobra de ${formatToBRL(rendimentoDisponivel)} mensais. Pode investir ${formatToBRL(investimentoSeguro)} com seguran√ßa total.`,
        };
    }

    // Fallback (n√£o deveria chegar aqui)
    return {
        cenario: "INDEFINIDO",
        statusEconomia: "REGULAR",
        precisaEconomizar: false,
        economiaRecomendada: 0,
        investimentoRecomendado: 0,
        rendimentoDisponivel: rendimentoDisponivel,
        resumo: "An√°lise em processamento...",
    };
};

// Fun√ß√£o para tentar Google Gemini com retry e fallback
const tentarGemini = async (prompt: string, tentativas: number = 3) => {
    // Verificar se a API key est√° dispon√≠vel
    const apiKey = process.env.GEMINI_API_KEY;
    if (!apiKey || apiKey.trim() === "") {
        console.log("‚ùå GEMINI_API_KEY n√£o configurada");
        return null;
    }

    for (let tentativa = 1; tentativa <= tentativas; tentativa++) {
        try {
            console.log(
                `ü§ñ Tentando usar Google Gemini (${tentativa}/${tentativas})...`,
            );

            const genAI = new GoogleGenerativeAI(apiKey);

            // Tentar diferentes modelos se necess√°rio
            const modelosTeste = [
                "gemini-1.5-flash",
                "gemini-1.5-pro",
                "gemini-pro",
            ];

            let model;
            try {
                model = genAI.getGenerativeModel({
                    model: modelosTeste[tentativa - 1] || "gemini-1.5-flash",
                    generationConfig: {
                        temperature: 0.7,
                        topK: 40,
                        topP: 0.95,
                        maxOutputTokens: 1024,
                    },
                });
            } catch (modelError) {
                console.log(
                    `‚ö†Ô∏è Modelo ${modelosTeste[tentativa - 1]} n√£o dispon√≠vel, usando padr√£o`,
                );
                model = genAI.getGenerativeModel({
                    model: "gemini-1.5-flash",
                    generationConfig: {
                        temperature: 0.7,
                        topK: 40,
                        topP: 0.95,
                        maxOutputTokens: 1024,
                    },
                });
            }

            console.log("üìù Enviando prompt para Gemini...");
            const result = await model.generateContent(prompt);

            console.log("üì® Recebendo resposta do Gemini...");
            const response = await result.response;
            const aiResponse = response.text();

            console.log(
                "üìÑ Resposta bruta do Gemini:",
                aiResponse.substring(0, 200) + "...",
            );

            // Tentar extrair JSON com m√∫ltiplas estrat√©gias
            let parsedResult = null;

            // Estrat√©gia 1: JSON simples
            const jsonMatch = aiResponse.match(/\{[\s\S]*?\}/);
            if (jsonMatch) {
                try {
                    parsedResult = JSON.parse(jsonMatch[0]);
                    console.log("‚úÖ JSON extra√≠do (estrat√©gia 1)");
                } catch (parseError) {
                    console.log("‚ö†Ô∏è Falha na estrat√©gia 1 de parsing");
                }
            }

            // Estrat√©gia 2: JSON em bloco de c√≥digo
            if (!parsedResult) {
                const alternativeMatch = aiResponse.match(
                    /```json\s*(\{[\s\S]*?\})\s*```/,
                );
                if (alternativeMatch) {
                    try {
                        parsedResult = JSON.parse(alternativeMatch[1]);
                        console.log("‚úÖ JSON extra√≠do (estrat√©gia 2)");
                    } catch (parseError) {
                        console.log("‚ö†Ô∏è Falha na estrat√©gia 2 de parsing");
                    }
                }
            }

            // Estrat√©gia 3: JSON mais permissivo
            if (!parsedResult) {
                const permissiveMatch = aiResponse.match(
                    /\{[^{}]*(?:\{[^{}]*\}[^{}]*)*\}/,
                );
                if (permissiveMatch) {
                    try {
                        parsedResult = JSON.parse(permissiveMatch[0]);
                        console.log("‚úÖ JSON extra√≠do (estrat√©gia 3)");
                    } catch (parseError) {
                        console.log("‚ö†Ô∏è Falha na estrat√©gia 3 de parsing");
                    }
                }
            }

            if (parsedResult) {
                console.log("üéâ Gemini respondeu com sucesso!");
                return parsedResult;
            }

            throw new Error("JSON n√£o encontrado em nenhuma estrat√©gia");
        } catch (error: any) {
            console.log(
                `‚ùå Erro no Gemini (tentativa ${tentativa}):`,
                error.message,
            );

            // Log detalhado do erro
            if (
                error.message.includes("overloaded") ||
                error.message.includes("503")
            ) {
                console.log(
                    "üîÑ Servidor sobrecarregado - tentando novamente...",
                );
                if (tentativa < tentativas) {
                    const delay = Math.min(
                        1000 * Math.pow(2, tentativa - 1),
                        10000,
                    ); // Exponential backoff
                    console.log(
                        `‚è≥ Aguardando ${delay}ms antes da pr√≥xima tentativa...`,
                    );
                    await new Promise((resolve) => setTimeout(resolve, delay));
                    continue;
                }
            } else if (error.message.includes("API_KEY_INVALID")) {
                console.log(
                    "üîë Erro: API Key inv√°lida - verifique se a chave est√° correta",
                );
                break; // N√£o tentar novamente para erros de API key
            } else if (error.message.includes("QUOTA_EXCEEDED")) {
                console.log(
                    "üìä Erro: Quota da API excedida - aguarde ou upgrade seu plano",
                );
                break; // N√£o tentar novamente para quota excedida
            } else if (error.message.includes("PERMISSION_DENIED")) {
                console.log(
                    "üö´ Erro: Permiss√£o negada - verifique se a API est√° habilitada",
                );
                break; // N√£o tentar novamente para permiss√£o negada
            } else if (error.message.includes("SAFETY")) {
                console.log(
                    "üõ°Ô∏è Erro: Conte√∫do bloqueado por seguran√ßa - ajuste o prompt",
                );
                break; // N√£o tentar novamente para filtro de seguran√ßa
            } else if (error.name === "SyntaxError") {
                console.log(
                    "üìù Erro: Falha ao parsear JSON - resposta em formato inv√°lido",
                );
                if (tentativa < tentativas) {
                    console.log(
                        "üîÑ Tentando novamente com parsing diferente...",
                    );
                    continue;
                }
            } else {
                console.log("üîß Erro t√©cnico:", error.name, "-", error.message);
                if (tentativa < tentativas) {
                    console.log("üîÑ Tentando novamente...");
                    continue;
                }
            }

            // Se chegou at√© aqui e √© a √∫ltima tentativa, retornar null
            if (tentativa === tentativas) {
                console.log(`üíÄ Gemini falhou ap√≥s ${tentativas} tentativas`);
                return null;
            }
        }
    }

    return null;
};

// Fun√ß√£o para tentar OpenAI
const tentarOpenAI = async (prompt: string) => {
    try {
        const openai = new OpenAI({
            apiKey: process.env.OPENAI_API_KEY,
        });

        const completion = await openai.chat.completions.create({
            model: "gpt-3.5-turbo",
            messages: [
                {
                    role: "system",
                    content:
                        "Voc√™ √© um consultor financeiro especializado. Responda APENAS com JSON v√°lido.",
                },
                {
                    role: "user",
                    content: prompt,
                },
            ],
            temperature: 0.7,
            max_tokens: 1000,
        });

        const aiResponse = completion.choices[0].message.content;
        const jsonMatch = aiResponse?.match(/\{[\s\S]*\}/);
        if (jsonMatch) {
            return JSON.parse(jsonMatch[0]);
        }
        throw new Error("JSON n√£o encontrado na resposta OpenAI");
    } catch (error: any) {
        console.log("OpenAI n√£o dispon√≠vel:", error.message);
        return null;
    }
};

app.post("/api/ia/analise-investimento", async (c) => {
    try {
        const supabase = getSupabaseClient(c);

        // Verificar autentica√ß√£o
        const {
            data: { user },
            error: userError,
        } = await supabase.auth.getUser();

        if (userError || !user) {
            return c.json({ error: "Usu√°rio n√£o autenticado" }, 401);
        }

        // Receber dados do frontend (pode incluir m√™s/ano espec√≠fico)
        const requestBody = await c.req.json();
        const { mes, ano, cotacaoDolar } = requestBody;

        // Se n√£o especificar m√™s/ano, usar atual
        const currentDate = new Date();
        const targetMonth = mes || currentDate.getMonth() + 1;
        const targetYear = ano || currentDate.getFullYear();

        // Buscar rendimentos reais do usu√°rio no Supabase
        const { data: incomes, error: incomesError } = await supabase
            .from("incomes")
            .select("*")
            .eq("user_id", user.id);

        if (incomesError) {
            console.error("Erro ao buscar rendimentos:", incomesError);
            return c.json(
                { error: "Erro ao buscar dados de rendimentos" },
                500,
            );
        }

        // Buscar tarefas/despesas reais do usu√°rio no Supabase
        const { data: tasks, error: tasksError } = await supabase
            .from("tasks")
            .select("*")
            .eq("user_id", user.id);

        if (tasksError) {
            console.error("Erro ao buscar tarefas:", tasksError);
            return c.json({ error: "Erro ao buscar dados de tarefas" }, 500);
        }

        // Filtrar rendimentos do m√™s/ano espec√≠fico
        const rendimentosDoMes =
            incomes?.filter((income) => {
                if (income.mes && income.ano) {
                    return (
                        income.mes === targetMonth && income.ano === targetYear
                    );
                }
                return true; // Se n√£o tem m√™s/ano, considera todos
            }) || [];

        // Calcular rendimento do m√™s espec√≠fico
        const rendimentoMes = rendimentosDoMes.reduce((total, income) => {
            return total + parseFloat(income.valor || "0");
        }, 0);

        // Filtrar tarefas do m√™s/ano espec√≠fico se dispon√≠vel
        const tarefasDoMes =
            tasks?.filter((task) => {
                if (task.mes && task.ano) {
                    return task.mes === targetMonth && task.ano === targetYear;
                }
                return true; // Se n√£o tem m√™s/ano, considera todas
            }) || [];

        // Calcular tarefas pagas e pendentes
        const tarefasPagas = tarefasDoMes
            .filter((task) => task.done === true)
            .reduce((total, task) => {
                return total + parseFloat(task.price || "0");
            }, 0);

        const tarefasPendentes = tarefasDoMes
            .filter((task) => task.done === false)
            .reduce((total, task) => {
                return total + parseFloat(task.price || "0");
            }, 0);

        // Obter cota√ß√£o do d√≥lar se n√£o fornecida
        let finalCotacaoDolar = cotacaoDolar;
        if (!finalCotacaoDolar) {
            try {
                const dolarResponse = await fetch(
                    "https://economia.awesomeapi.com.br/last/USD-BRL",
                );
                const dolarData = await dolarResponse.json();
                finalCotacaoDolar = parseFloat(dolarData.USDBRL.bid);
            } catch (error) {
                console.warn(
                    "Erro ao buscar cota√ß√£o do d√≥lar, usando valor padr√£o",
                );
                finalCotacaoDolar = 5.5; // Valor padr√£o
            }
        }

        // Validar se temos dados suficientes
        if (rendimentoMes === 0) {
            return c.json(
                {
                    error: "Nenhum rendimento encontrado",
                    message: "Cadastre seus rendimentos para gerar an√°lise",
                    suggestion:
                        "Use POST /api/incomes para adicionar rendimentos",
                },
                400,
            );
        }

        // Calcular dados financeiros
        const totalTarefas = tarefasPagas + tarefasPendentes;
        const rendimentoDisponivel = rendimentoMes - totalTarefas;
        const percentualGasto =
            rendimentoMes > 0 ? (totalTarefas / rendimentoMes) * 100 : 0;
        const percentualDisponivel = 100 - percentualGasto;

        // Calcular investimento recomendado - ZERO se h√° d√©ficit
        const investimentoRecomendado =
            rendimentoDisponivel > 0 ? rendimentoMes * 0.3 : 0;
        const investimentoDisponivel = Math.max(0, rendimentoDisponivel * 0.3);

        // Convers√µes para d√≥lar
        const investimentoUSD = convertBRLtoUSD(
            investimentoRecomendado,
            finalCotacaoDolar,
        );
        const investimentoDisponivelUSD = convertBRLtoUSD(
            investimentoDisponivel,
            finalCotacaoDolar,
        );

        // An√°lise de economia - situa√ß√£o cr√≠tica se gastos > 100%
        const precisaEconomizar = percentualGasto > 100;
        const economiaRecomendada =
            percentualGasto > 100 ? Math.abs(rendimentoDisponivel) : 0;

        // Determinar status econ√¥mico baseado no percentual gasto
        let statusEconomico = "BOM";
        if (percentualGasto > 100) {
            statusEconomico = "CR√çTICO";
        } else if (percentualGasto > 80) {
            statusEconomico = "REGULAR";
        }

        // Construir prompt refinado baseado nos cen√°rios financeiros
        const analiseRefinada = analiseLocalInteligente(
            rendimentoMes,
            tarefasPagas,
            tarefasPendentes,
            totalTarefas,
            rendimentoDisponivel,
            percentualGasto,
            economiaRecomendada,
        );

        const prompt = `
üéØ AN√ÅLISE FINANCEIRA REFINADA POR CEN√ÅRIOS

üìä DADOS FUNDAMENTAIS:
- Rendimento Mensal: ${formatToBRL(rendimentoMes)}
- Gastos Mensais: ${formatToBRL(totalTarefas)}
- Resultado: ${rendimentoDisponivel >= 0 ? "SUPER√ÅVIT" : "D√âFICIT"} de ${formatToBRL(Math.abs(rendimentoDisponivel))}
- Cen√°rio Identificado: ${analiseRefinada.cenario}

${
    analiseRefinada.cenario === "D√âFICIT_CR√çTICO"
        ? `
üö® CEN√ÅRIO: D√âFICIT CR√çTICO
O usu√°rio est√° gastando ${(percentualGasto / 100).toFixed(1)}x mais do que ganha.

ESTRAT√âGIA DE RECUPERA√á√ÉO NECESS√ÅRIA:
${analiseRefinada.estrategiaRecuperacao?.prioridade1}
${analiseRefinada.estrategiaRecuperacao?.prioridade2}
${analiseRefinada.estrategiaRecuperacao?.prioridade3}

AN√ÅLISE REQUERIDA:
- Investimento: ${formatToBRL(analiseRefinada.investimentoRecomendado)} (ZERO at√© equilibrar)
- Economia necess√°ria: ${formatToBRL(analiseRefinada.economiaRecomendada)}
- Foco: Estrat√©gias para eliminar d√©ficit
- Prazo: M√°ximo 6 meses para equilibrar
`
        : analiseRefinada.cenario === "EQUIL√çBRIO_FR√ÅGIL"
          ? `
‚öñÔ∏è CEN√ÅRIO: EQUIL√çBRIO FR√ÅGIL
Situa√ß√£o controlada mas sem margem para investimentos seguros.

ESTRAT√âGIA DE OTIMIZA√á√ÉO:
${analiseRefinada.estrategiaOtimizacao?.foco1}
${analiseRefinada.estrategiaOtimizacao?.foco2}
${analiseRefinada.estrategiaOtimizacao?.foco3}

AN√ÅLISE REQUERIDA:
- Investimento seguro: ${formatToBRL(analiseRefinada.investimentoRecomendado)} (apenas ap√≥s reserva)
- Foco: Criar margem de seguran√ßa e reserva
- Meta: Aumentar renda em 20-30% para investir
`
          : `
‚úÖ CEN√ÅRIO: SUPER√ÅVIT SAUD√ÅVEL
Excelente controle financeiro com margem para investimentos.

ESTRAT√âGIA DE INVESTIMENTO:
- Valor dispon√≠vel: ${formatToBRL(rendimentoDisponivel)}
- Investimento seguro: ${formatToBRL(analiseRefinada.investimentoRecomendado)}
- Reserva emerg√™ncia: ${formatToBRL(rendimentoDisponivel * 0.3)}

AN√ÅLISE REQUERIDA:
- Distribui√ß√£o otimizada dos investimentos
- Estrat√©gias de crescimento patrimonial
- Diversifica√ß√£o por perfil de risco
`
}

RESPONDA EM JSON ESTRUTURADO:
{
  "analise": {
    "cenario": "${analiseRefinada.cenario}",
    "statusEconomia": "${analiseRefinada.statusEconomia}",
    "precisaEconomizar": ${analiseRefinada.precisaEconomizar},
    "rendimentoAnalise": "an√°lise do rendimento mensal",
    "gastoAnalise": "an√°lise dos gastos mensais",
    "disponibilidadeInvestimento": "an√°lise da capacidade de investir"
  },
  "recomendacoes": {
    "investimento": {
      "valor": ${analiseRefinada.investimentoRecomendado},
      "justificativa": "baseado na an√°lise de cen√°rio",
      "estrategia": "distribui√ß√£o conforme perfil"
    },
    "melhoria": {
      "foco": "√°rea priorit√°ria para melhoria",
      "acoes": ["a√ß√£o1", "a√ß√£o2", "a√ß√£o3"],
      "prazos": "cronograma de implementa√ß√£o"
    }
  },
  "resumo": "${analiseRefinada.resumo}"
}
- statusEconomia (bom/regular/critico)
- precisaEconomizar (boolean)
- economiaRecomendada (number)
- estrategiaInvestimento (object com curtoPrazo, medioPrazo, longoPrazo)
- dicasEconomia (array de strings)
- distribuicaoInvestimento (object com poupanca, dolar, outros)
- resumo (string)

IMPORTANTE: Se percentualGasto > 100%, a situa√ß√£o √© CR√çTICA e precisa de a√ß√£o imediata!
Responda APENAS com o JSON v√°lido, sem texto adicional.
`;

        // Tentar m√∫ltiplas IAs em ordem de prioridade
        let analysisResult = null;
        let iaUsada = "local";

        // 1. Tentar Google Gemini com retry
        if (process.env.GEMINI_API_KEY) {
            console.log("üöÄ Iniciando tentativas com Google Gemini...");
            analysisResult = await tentarGemini(prompt, 3);
            if (analysisResult) {
                iaUsada = "Google Gemini";
                console.log("‚úÖ An√°lise gerada com sucesso pelo Gemini!");
            } else {
                console.log("‚ö†Ô∏è Gemini falhou, tentando fallback...");
            }
        }

        // 2. Tentar OpenAI se Gemini falhou
        if (!analysisResult && process.env.OPENAI_API_KEY) {
            console.log("üîÑ Tentando OpenAI como fallback...");
            analysisResult = await tentarOpenAI(prompt);
            if (analysisResult) {
                iaUsada = "OpenAI";
                console.log("‚úÖ An√°lise gerada com sucesso pelo OpenAI!");
            } else {
                console.log("‚ö†Ô∏è OpenAI tamb√©m falhou, usando an√°lise local...");
            }
        }

        // 3. Usar an√°lise local inteligente como fallback garantido
        if (!analysisResult) {
            console.log("üß† Usando an√°lise local inteligente como fallback...");
            analysisResult = analiseLocalInteligente(
                rendimentoMes,
                tarefasPagas,
                tarefasPendentes,
                totalTarefas,
                rendimentoDisponivel,
                percentualGasto,
                economiaRecomendada,
            );
            iaUsada = "An√°lise Local Inteligente";
            console.log("‚úÖ An√°lise local gerada com sucesso!");
        }

        return c.json(
            {
                success: true,
                data: {
                    dashboard: {
                        rendimentoMes: rendimentoMes,
                        rendimentoMesBRL: formatToBRL(rendimentoMes),
                        rendimentoDisponivel: rendimentoDisponivel,
                        rendimentoDisponivelBRL:
                            formatToBRL(rendimentoDisponivel),
                        percentualGasto: percentualGasto,
                        percentualDisponivel: percentualDisponivel,
                        tarefasPagas: tarefasPagas,
                        tarefasPagasBRL: formatToBRL(tarefasPagas),
                        tarefasPendentes: tarefasPendentes,
                        tarefasPendentesBRL: formatToBRL(tarefasPendentes),
                        totalTarefas: totalTarefas,
                        totalTarefasBRL: formatToBRL(totalTarefas),
                    },
                    investimento: {
                        recomendado: investimentoRecomendado,
                        recomendadoBRL: formatToBRL(investimentoRecomendado),
                        recomendadoUSD: investimentoUSD,
                        disponivel: investimentoDisponivel,
                        disponivelBRL: formatToBRL(investimentoDisponivel),
                        disponivelUSD: investimentoDisponivelUSD,
                        percentualSalario: 30,
                    },
                    cotacaoDolar: {
                        valor: finalCotacaoDolar,
                        valorBRL: formatToBRL(finalCotacaoDolar),
                        timestamp: new Date().toISOString(),
                    },
                    analise: analysisResult,
                    metadata: {
                        timestamp: new Date().toISOString(),
                        fonte: "Dados Reais do Supabase",
                        versao: "8.0",
                        ia: iaUsada,
                        usuario: user.id,
                        dadosReais: {
                            totalRendimentos: incomes?.length || 0,
                            totalTarefas: tarefasDoMes.length,
                            mesAno: `${targetMonth}/${targetYear}`,
                            rendimentoMes,
                            tarefasPagas,
                            tarefasPendentes,
                            cotacaoDolar: finalCotacaoDolar,
                            ultimaAtualizacao: new Date().toISOString(),
                        },
                    },
                },
            },
            200,
            {
                "Cache-Control": "no-cache, no-store, must-revalidate",
                Pragma: "no-cache",
                Expires: "0",
            },
        );
    } catch (error: any) {
        return c.json(
            {
                error: "Erro na an√°lise de investimento",
                details: error.message,
            },
            500,
        );
    }
});

export const POST = app.fetch;
export const OPTIONS = app.fetch;
export default app.fetch;
